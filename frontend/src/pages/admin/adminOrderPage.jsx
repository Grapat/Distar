import React, { useEffect, useState } from "react";
import "../../css/adminOrderPage.css";
import { API } from "../../lib/api";

const AdminOrderPage = () => {
  const [orders, setOrders] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterDOW, setFilterDOW] = useState(""); // üëà ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏™‡πà‡∏á

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const response = await fetch(`${API}/api/order`);
        const data = await response.json();
        setOrders(data);
      } catch (error) {
        console.error("Error fetching orders:", error);
      }
    };

    fetchOrders();
  }, []);

  const handleStatusChange = async (orderId, newStatus) => {
    try {
      await fetch(`${API}/api/order/${orderId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ status: newStatus }),
      });
      setOrders((prevOrders) =>
        prevOrders.map((order) =>
          order.order_id === orderId ? { ...order, status: newStatus } : order
        )
      );
    } catch (error) {
      console.error("Error updating order status:", error);
    }
  };

  const handleDeleteOrder = async (orderId) => {
    if (!window.confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö Order #${orderId}?`)) return;

    try {
      const response = await fetch(`${API}/api/order/${orderId}`, {
        method: "DELETE",
      });

      if (!response.ok) {
        const result = await response.json();
        return alert(`‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.message}`);
      }

      setOrders((prevOrders) => prevOrders.filter((order) => order.order_id !== orderId));
      alert(`‡∏•‡∏ö Order #${orderId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞`);
    } catch (error) {
      console.error("Error deleting order:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠");
    }
  };

  const renderOrder = (order) => {
    return (
      <div key={order.order_id} className="order-item-user">
        <h4>Order #{order.order_id}</h4>
        <p>‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {order.date_deli?.slice(0, 10)} ({order.DOW || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"})</p>
        <p>‡∏ú‡∏±‡∏Å {order.Order_Items.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏£‡∏ß‡∏° {order.Order_Items.reduce((sum, item) => sum + item.quantity, 0)} ‡∏´‡∏ô‡πà‡∏ß‡∏¢</p>

        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏±‡∏Å */}
        <ul style={{ marginTop: "0.5rem", paddingLeft: "1rem" }}>
          {order.Order_Items.map((item) => (
            <li key={item.order_item_id}>
              {item.Vegetable?.name || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏±‡∏Å"} √ó {item.quantity} ‡∏´‡∏ô‡πà‡∏ß‡∏¢
            </li>
          ))}
        </ul>

        <div className="order-buttons">
          <label htmlFor={`status-${order.order_id}`}>‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</label>
          <select
            id={`status-${order.order_id}`}
            value={order.status}
            onChange={(e) => handleStatusChange(order.order_id, e.target.value)}
          >
            <option value="pending">‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</option>
            <option value="shipped">‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß</option>
            <option value="delivered">‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</option>
          </select>

          <button className="order-delete-btn" onClick={() => handleDeleteOrder(order.order_id)}>
            ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
          </button>
        </div>
      </div>
    );
  };

  const filteredOrders = orders.filter((order) => {
    const name = order.User?.name?.toLowerCase() || "";
    const email = order.User?.email?.toLowerCase() || "";
    const userId = order?.user_id?.toLowerCase() || "";

    const matchesSearch = name.includes(searchTerm) || email.includes(searchTerm) || userId.includes(searchTerm);
    const matchesDOW = !filterDOW || order.DOW === filterDOW;

    return matchesSearch && matchesDOW;
  });

  return (
    <div className="admin-order-layout">
      <div className="admin-order-controls">
        {/* üéõÔ∏è Control Panel */}
        <h2>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h2>
        <input
          type="text"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠ ID"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value.toLowerCase())}
        />
        <select value={filterDOW} onChange={(e) => setFilterDOW(e.target.value)}>
          <option value="">-- ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô --</option>
          <option value="Monday">Monday</option>
          <option value="Tuesday">Tuesday</option>
          <option value="Wednesday">Wednesday</option>
          <option value="Thursday">Thursday</option>
          <option value="Friday">Friday</option>
          <option value="Saturday">Saturday</option>
          <option value="Sunday">Sunday</option>
        </select>
      </div>

      <div className="admin-order-display">
        {/* üî≤ ‡∏Å‡∏£‡∏¥‡∏î 3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
        <div className="order-warp">
          <div className="order-column pending">
            {filteredOrders.filter((o) => o.status === "pending").map(renderOrder)}
          </div>
          <div className="order-column shipped">
            {filteredOrders.filter((o) => o.status === "shipped").map(renderOrder)}
          </div>
          <div className="order-column delivered">
            {filteredOrders.filter((o) => o.status === "delivered").map(renderOrder)}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminOrderPage;
