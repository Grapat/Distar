import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import "../../css/adminHome.css";
import { API } from "../../lib/api";

const AdminDashboard = () => {
  const [users, setUsers] = useState([]);
  const [orders, setOrders] = useState([]);
  const navigate = useNavigate();
  const [vegetables, setVegetables] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState("all");
  const [stockFilter, setStockFilter] = useState("all");
  const [searchTerm, setSearchTerm] = useState("");
  const [categories, setCategories] = useState([]);


  useEffect(() => {
    const fetchData = async () => {
      try {
        const token = localStorage.getItem("token");

        // ‚úÖ Users
        const userRes = await fetch("http://localhost:4005/api/users" || `${API}/api/users`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const userData = await userRes.json();
        setUsers(userData);

        // ‚úÖ Orders
        const orderRes = await fetch("http://localhost:4005/api/order" || `${API}/api/order`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const orderData = await orderRes.json();
        setOrders(orderData);

        // ‚úÖ Vegetables
        const vegRes = await fetch("http://localhost:4005/api/vegs" || `${API}/api/vegs`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const vegData = await vegRes.json();
        setVegetables(vegData);

        // ‚úÖ Categories
        const catRes = await fetch("http://localhost:4005/api/categories" || `${API}/api/categories`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const catData = await catRes.json();
        setCategories(catData);

      } catch (error) {
        console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
      }
    };

    fetchData();
  }, []);

  // ‚úÖ ‡πÅ‡∏¢‡∏Å‡∏ú‡∏±‡∏Å‡∏ï‡∏≤‡∏° category
  const groupedByCategory = vegetables.reduce((acc, veg) => {
    const category = veg.category || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó";
    if (!acc[category]) acc[category] = [];
    acc[category].push(veg);
    return acc;
  }, {});

  return (
    <>
      <div className="admin-home">
        <h2>Admin Dashboard</h2>
        <div className="dashboard-grid">
          {/* üßë User */}
          <div
            className="admin-section"
            style={{ cursor: "pointer" }}
            onClick={() => navigate("/admin/user-page")}
          >
            <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h3>
            <p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {users.length} ‡∏Ñ‡∏ô</p>
          </div>
          {/* üì¶ Order */}
          <div className="admin-section"
            style={{ cursor: "pointer" }}
            onClick={() => navigate("/admin/orders-page")}
          >
            <h3>‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h3>
            <p>‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: {orders.filter(o => o.status === "pending").length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
            <p>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {orders.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
          </div>
          {/* ü•¨ Veg */}
          <div className="admin-section"
            style={{ cursor: "pointer" }}
            onClick={() => navigate("/admin/vegies-page")}
          >
            <h3>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏±‡∏Å</h3>
            <p>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {vegetables.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
            <p>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {categories.length} ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</p>
          </div>
        </div>
        <div className="dashboard-grid">
          <div className="veg-filter-box">
            <div className="veg-filter-bar">
              <input
                type="text"
                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏±‡∏Å..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />

              <select value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)}>
                <option value="all">‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</option>
                {[...new Set(vegetables.map((v) => v.Category?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))].map((cat, i) => (
                  <option key={i} value={cat}>{cat}</option>
                ))}
              </select>

              <select value={stockFilter} onChange={(e) => setStockFilter(e.target.value)}>
                <option value="all">‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å</option>
                <option value="warning">‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 100</option>
                <option value="runout">‡∏´‡∏°‡∏î (stock = 0)</option>
              </select>

            </div>
          </div>
          <div className="veg-list-container">
            {vegetables
              .filter((v) =>
                // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏±‡∏Å
                v.name.toLowerCase().includes(searchTerm.toLowerCase())
              )
              .filter((v) =>
                // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                selectedCategory === "all" ? true : (v.Category?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏") === selectedCategory
              )
              .filter((v) =>
                // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á stock
                stockFilter === "all"
                  ? true
                  : stockFilter === "warning"
                    ? v.stock < 100
                    : v.stock === 0
              )
              .sort((a, b) => a.stock - b.stock)
              .map((veg) => (
                <div key={veg.vegetable_id} className="veg-list-item">
                  <div className="veg-list-left">
                    <h4>{veg.name}</h4>
                    <p>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {veg.Category?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</p>
                  </div>
                  <div className="veg-stock">‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {veg.stock}</div>
                </div>
              ))}
          </div>
        </div>
      </div>

    </>
  );
};

export default AdminDashboard;
